name: Deploy Backend

on:
  push:
    branches:
      - 'main'

jobs:
  changes:
    name: Check which apps have changed
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/mgmt-ui**'

  release:
    name: Generate release number
    runs-on: ubuntu-latest
    outputs:
      release-number: ${{ steps.release-number.outputs.RELEASE_NUMBER }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main

      - name: Get RC number
        id: rc-number
        run: |
          COUNT_SINCE_RELEASE=$(git rev-list ${{steps.package-version.outputs.current-version}}..main --count)
          printf "TAG_NAME=%04d" $COUNT_SINCE_RELEASE >> $GITHUB_OUTPUT
      - name: Generate release number
        id: release-number
        run: echo "RELEASE_NUMBER=${{ steps.package-version.outputs.current-version }}-beta.${{ steps.rc-number.outputs.TAG_NAME }}" >> $GITHUB_OUTPUT

      - id: output-repease-number
        run: echo Release ${{ steps.release-number.outputs.release-number }}

  publish-docker:
    name: Publish docker image to ECR
    needs: [changes, release]
    if: ${{ needs.changes.outputs.frontend != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_DEFAULT_ROLE }}
          role-session-name: GithubActions
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version-file: '.nvmrc'
      - name: 'Install Dependencies'
        run: npm install

      - name: Get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main

      - name: Docker Metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/enrolla-server
          flavor: |
            latest=true
          tags: |
            type=sha,prefix=sha-
            type=raw,value=${{ needs.release.outputs.release-number }}

      - name: 'Build images'
        run: npx nx run-many --target=container --parallel=2
        env:
          INPUT_TAGS: ${{ steps.meta.outputs.tags }}
          INPUT_PUSH: true

  deploy-docker:
    name: Deploy to staging
    needs: [changes, release, publish-docker]
    if: ${{ needs.changes.outputs.frontend != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main

      - name: Install Octopus CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1

      - name: Create and deploy release
        uses: OctopusDeploy/create-release-action@v1
        with:
          api_key: ${{ secrets.OCTOPUS_API_KEY }}
          server: ${{ secrets.OCTOPUS_SERVER }}
          space: ${{ secrets.OCTOPUS_SPACE }}
          project: 'enrolla-server'
          deploy_to: 'Staging'
          release_number: ${{ needs.release.outputs.release-number }}
